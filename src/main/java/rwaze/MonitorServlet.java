package rastmonitor;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.omg.CORBA.portable.InputStream;

import com.googlecode.objectify.Key;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.Result;
import com.googlecode.objectify.annotation.AlsoLoad;
import com.googlecode.objectify.annotation.Cache;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.IgnoreSave;
import com.googlecode.objectify.annotation.Load;
import com.googlecode.objectify.annotation.OnLoad;
import com.googlecode.objectify.annotation.Index;

import static com.googlecode.objectify.ObjectifyService.ofy;

@Entity
class Person {
	
	public Person() {
		id = "John Doe";
	}
	
	@Id String id;
}

@Entity
class Car {
		
    @Id Long id;
    @Index String license;
    int color;
    Person person;
}


public class MonitorServlet extends HttpServlet {
	
	  @Override
	  public void init() throws ServletException {
		  
		  System.out.println("**** MonitorServlet invoked ****");
		  
		  ObjectifyService.register(Car.class);
		  ObjectifyService.register(Person.class);
		  
	  }	
	
	  @Override
	  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		  
          resp.setContentType("text/plain");
		  add();
		  resp.getWriter().println("OKay");		  
		  //System.out.println(new Date());
	  }

	  private void add(){
		  Car porsche = new Car();
		  porsche.color = 8;
		  porsche.license = "2FAST";
		  porsche.person = new Person();
		  
		  ofy().save().entity(porsche).now();    // async without the now()

		  assert porsche.id != null;    // id was autogenerated

		  // Get it back
		  Result<Car> result = ofy().load().key(Key.create(Car.class, porsche.id));  // Result is async
		  Car fetched1 = result.now();    // Materialize the async value

		  // More likely this is what you will type
		  Car fetched2 = ofy().load().type(Car.class).id(porsche.id).now();

		  // Or you can issue a query
		  Car fetched3 = ofy().load().type(Car.class).filter("license", "2FAST").first().now();

		  // Change some data and write it
		  porsche.color = 9;
		  ofy().save().entity(porsche).now();    // async without the now()

		  // Delete it
		  //ofy().delete().entity(porsche).now();    // async without the now()		  
	  }
	  
}
